// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const changePostByID = `-- name: ChangePostByID :exec
UPDATE posts SET
body = $1, updated_at = NOW()
WHERE id = $2
`

type ChangePostByIDParams struct {
	Body string
	ID   uuid.UUID
}

func (q *Queries) ChangePostByID(ctx context.Context, arg ChangePostByIDParams) error {
	_, err := q.db.ExecContext(ctx, changePostByID, arg.Body, arg.ID)
	return err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, created_at, updated_at, user_id, body, likes)
VALUES (
   $1,
   NOW(),
   NOW(),
   $2,
   $3,
   $4
)
RETURNING id, created_at, updated_at, user_id, body, likes
`

type CreatePostParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
	Body   string
	Likes  int32
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.UserID,
		arg.Body,
		arg.Likes,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Body,
		&i.Likes,
	)
	return i, err
}

const deletePostByID = `-- name: DeletePostByID :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePostByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePostByID, id)
	return err
}

const getMostLikedPosts = `-- name: GetMostLikedPosts :many
SELECT id, created_at, updated_at, user_id, body, likes FROM posts
ORDER BY likes ASC LIMIT 10
`

func (q *Queries) GetMostLikedPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getMostLikedPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.Body,
			&i.Likes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, created_at, updated_at, user_id, body, likes FROM posts
WHERE id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Body,
		&i.Likes,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, created_at, updated_at, user_id, body, likes FROM posts
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.Body,
			&i.Likes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
